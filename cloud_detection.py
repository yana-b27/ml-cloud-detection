# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudDetectionPlugin
                                 A QGIS plugin
 Plugin for detecting clouds in satellite imagery using ML algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yana Bakhramkhan
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import Qgis, QgsProject
import os

# Импортируем диалоговое окно
from .cloud_detection_dialog import CloudDetectionDialog


class CloudDetectionPlugin:
    """
    CloudDetectionPlugin is a QGIS plugin that provides functionality for detecting clouds in satellite imagery.
    Attributes:
        iface (QgisInterface): The QGIS interface instance that provides access to QGIS functionalities.
        plugin_dir (str): The directory where the plugin is located.
        actions (list): A list of QAction objects associated with the plugin.
        menu (str): The name of the plugin menu.
        translator (QTranslator): The translator object for handling localization (if applicable).
    Methods:
        __init__(iface):
            Initializes the plugin with the QGIS interface and sets up localization.
        tr(message):
            Translates a given message string using the plugin's context.
        add_action(icon_path, text, callback, enabled_flag=True, add_to_menu=True,
                   add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
            Adds an action (menu item or toolbar button) to the plugin.
        initGui():
            Initializes the graphical user interface of the plugin by adding actions to the menu and toolbar.
        unload():
            Removes all actions from the menu and toolbar when the plugin is unloaded.
        run():
            Executes the main functionality of the plugin by displaying the cloud detection dialog.
    """

    def __init__(self, iface):
        """
        Initializes the Cloud Detection plugin.

        Args:
            iface (QgsInterface): An interface instance that provides the hook by which
                                  the plugin can access QGIS functionalities.

        Attributes:
            iface (QgsInterface): Stores the reference to the QGIS interface.
            plugin_dir (str): The directory path where the plugin is located.
            actions (list): A list to store plugin actions.
            menu (str): The name of the plugin menu.
            translator (QTranslator, optional): The translator object for handling
                                                localization, if a translation file exists.

        Localization:
            - Determines the user's locale settings.
            - Loads the appropriate translation file if available.
            - Installs the translator for the application.
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.actions = []
        self.menu = self.tr("&Cloud Detection")

        # Инициализация перевода
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "CloudDetection_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

    def tr(self, message):
        """
        Translates the given message string into the localized language for the 'CloudDetection' context.

        Args:
            message (str): The message string to be translated.

        Returns:
            str: The translated message string.
        """
        return QCoreApplication.translate("CloudDetection", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """
        Adds an action (button or menu item) to the QGIS interface.
        Parameters:
            icon_path (str): Path to the icon file for the action.
            text (str): Text label for the action.
            callback (callable): Function to be called when the action is triggered.
            enabled_flag (bool, optional): Whether the action is enabled by default. Defaults to True.
            add_to_menu (bool, optional): Whether to add the action to the plugin menu. Defaults to True.
            add_to_toolbar (bool, optional): Whether to add the action to the toolbar. Defaults to True.
            status_tip (str, optional): Tooltip text displayed in the status bar when hovering over the action. Defaults to None.
            whats_this (str, optional): "What's This?" help text for the action. Defaults to None.
            parent (QObject, optional): Parent widget for the action. Defaults to None.
        Returns:
            QAction: The created action object.
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """
        Initializes the GUI for the cloud detection plugin.

        This method sets up the plugin's interface by adding an action to the QGIS
        main window. The action includes an icon, a label, and a callback function
        that is triggered when the action is selected.

        The icon is loaded from the specified path, and the action is labeled
        "Detect clouds". When the action is triggered, the `run` method is called.
        """
        icon_path = ":/plugins/cloud_detection/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Detect clouds"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def unload(self):
        """
        Unloads the plugin by removing its actions from the QGIS interface.

        This method iterates through the list of actions associated with the plugin
        and removes each action from the plugin menu and toolbar in the QGIS interface.

        Attributes:
            self.actions (list): A list of QAction objects associated with the plugin.
            self.iface (QgisInterface): The QGIS interface instance used to interact
                with the QGIS application.
        """
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Cloud Detection"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """
        Executes the cloud detection dialog.

        This method creates an instance of the CloudDetectionDialog class,
        passing the QGIS interface as a parameter, and then displays the
        dialog to the user in a modal fashion.
        """
        dialog = CloudDetectionDialog(self.iface)
        dialog.exec_()
