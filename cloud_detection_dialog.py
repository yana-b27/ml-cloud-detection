# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudDetectionPluginDialog
                                 A QGIS plugin
 Plugin for detecting clouds in satellite imagery using ML algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-04-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Yana Bakhramkhan
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtWidgets import (
    QDialog,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QLineEdit,
    QLabel,
    QFileDialog,
    QComboBox,
    QTextEdit,
    QCheckBox,
)
from qgis.PyQt.QtGui import QColor
from qgis.core import (
    Qgis,
    QgsProject,
    QgsRasterLayer,
    QgsSingleBandPseudoColorRenderer,
    QgsContrastEnhancement,
    QgsColorRampShader,
    QgsRasterShader,
)
from qgis.core import QgsColorRampShader, QgsRasterShaderFunction
from qgis.utils import iface
import os
import rasterio

from .cloud_detector import detect_clouds


class CloudDetectionDialog(QDialog):
    """
    CloudDetectionDialog is a custom QDialog class for the QGIS plugin that facilitates cloud detection
    in satellite imagery using machine learning models. It provides a user interface for selecting input
    images, specifying output details, choosing a model type, and processing the image.
    Attributes:
        iface (QgsInterface): The QGIS interface instance for interacting with the QGIS application.
        select_button (QPushButton): Button to select the input satellite image.
        selected_image_label (QLabel): Label to display the name of the selected image.
        output_name (QLineEdit): Input field for specifying the output file name.
        output_dir (QLineEdit): Input field for specifying the output directory.
        dir_button (QPushButton): Button to browse and select the output directory.
        model_type_combo (QComboBox): Dropdown to select the machine learning model type.
        add_input_checkbox (QCheckBox): Checkbox to add the input image to the QGIS map.
        process_button (QPushButton): Button to start the cloud detection process.
        cancel_button (QPushButton): Button to cancel and close the dialog.
        info_text (QTextEdit): Read-only text area displaying information about the plugin.
    Methods:
        __init__(iface):
            Initializes the dialog with the given QGIS interface instance.
        setup_ui():
            Sets up the user interface components and layout for the dialog.
        select_image():
            Opens a file dialog to select a satellite image and validates the selection.
        select_output_dir():
            Opens a directory dialog to select the output directory.
        process_image():
            Validates user inputs, processes the selected image for cloud detection, and adds the result
            to the QGIS map.
        setup_layer_visualization(layer):
            Configures the visualization settings for the resulting raster layer.
    """

    def __init__(self, iface):
        """
        Initializes the CloudDetectionDialog.
        Args:
            iface: The QGIS interface instance, which provides access to the QGIS application.
        """
        super().__init__()
        self.iface = iface
        self.setWindowTitle("Cloud Detection")

        self.setMinimumSize(800, 300)
        self.resize(800, 300)

        self.setup_ui()

    def setup_ui(self):
        """
        Sets up the user interface for the Cloud Detection plugin dialog.

        This method initializes and arranges the widgets used in the plugin's dialog window.
        It includes input fields, buttons, and informational text to guide the user through
        the cloud detection process.

        UI Components:
        - Select Image Button: Allows the user to select an input image file.
        - Selected Image Label: Displays the name of the selected image.
        - Output Name Field: Input field for specifying the output file name.
        - Output Directory Field: Input field for specifying the output directory.
        - Browse Button: Opens a dialog to select the output directory.
        - Model Type ComboBox: Dropdown menu to select the machine learning model type
          (Logistic Regression or Naive Bayes).
        - Add Input Checkbox: Option to add the input image to the QGIS map.
        - Process Image Button: Initiates the cloud detection process.
        - Cancel Button: Closes the dialog without performing any action.
        - Info Text: Read-only text area providing detailed information about the plugin,
          including its purpose, models used, data preprocessing steps, and requirements.

        Layout:
        - The UI is divided into two main sections:
          1. Input Section: Contains all input-related widgets and buttons.
          2. Information Section: Displays plugin details and usage instructions.

        Notes:
        - The input image must be in .tif format with at least 4 channels (blue, green, red, NIR).
        - The plugin calculates spectral indices and custom metrics for cloud detection.
        """

        main_layout = QHBoxLayout()
        input_layout = QVBoxLayout()

        self.select_button = QPushButton("Select Image")
        self.select_button.clicked.connect(self.select_image)
        input_layout.addWidget(self.select_button)

        self.selected_image_label = QLabel("Selected Image: None")
        input_layout.addWidget(self.selected_image_label)

        self.output_name = QLineEdit()
        self.output_name.setPlaceholderText(
            "Output file name (e.g., clouds_detection_result)"
        )
        input_layout.addWidget(self.output_name)

        self.output_dir = QLineEdit()
        self.output_dir.setPlaceholderText("Output directory")
        input_layout.addWidget(self.output_dir)
        self.dir_button = QPushButton("Browse...")
        self.dir_button.clicked.connect(self.select_output_dir)
        input_layout.addWidget(self.dir_button)

        self.model_type_label = QLabel("Model Type:")
        input_layout.addWidget(self.model_type_label)
        self.model_type_combo = QComboBox()
        self.model_type_combo.addItems(["logistic regression", "naive bayes"])
        input_layout.addWidget(self.model_type_combo)

        self.add_input_checkbox = QCheckBox("Add input image to QGIS map")
        self.add_input_checkbox.setChecked(False)
        input_layout.addWidget(self.add_input_checkbox)

        self.process_button = QPushButton("Process Image")
        self.process_button.clicked.connect(self.process_image)
        input_layout.addWidget(self.process_button)

        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.clicked.connect(self.reject)
        input_layout.addWidget(self.cancel_button)

        main_layout.addLayout(input_layout)

        info_layout = QVBoxLayout()

        self.info_text = QTextEdit()
        self.info_text.setReadOnly(True)

        self.info_text.append("<b style='font-size: 16px;'>Cloud Detection</b>")
        self.info_text.append(
            "This plugin detects clouds in satellite imagery using machine learning techniques.\n"
        )
        self.info_text.append("Models Used:")
        self.info_text.append(
            "- The plugin employs two pre-trained models: Logistic Regression and Naive Bayes, allowing users to choose the preferred method for cloud detection.\n"
        )
        self.info_text.append("Data Preprocessing:")
        self.info_text.append(
            "- Input data is preprocessed by normalizing the channels to a [0, 1] range.\n"
            "- The plugin calculates necessary features for the models, including spectral indices (e.g., NDWI) and custom metrics (e.g., Cloud Index, Haze-Optimized Transformation).\n"
        )
        self.info_text.append("Requirements:")
        self.info_text.append(
            "- Format: .tif\n- Minimum 4 channels (blue, green, red, NIR)"
        )

        self.info_text.setStyleSheet("font-size: 12px;")

        info_layout.addWidget(self.info_text)

        main_layout.addLayout(info_layout)

        self.setLayout(main_layout)

        main_layout.setStretch(0, 2)
        main_layout.setStretch(1, 4)

    def select_image(self):
        """
        Opens a file dialog to select a satellite image file, validates the file format
        and checks the image properties.

        The method allows the user to select a satellite image file with a .tif or .tiff
        extension. It performs the following validations:
        - Ensures the selected file has a valid extension (.tif or .tiff).
        - Verifies that the image contains at least 4 channels (blue, green, red, NIR).

        If the file is invalid or an error occurs while reading the image, an appropriate
        error message is displayed in the QGIS message bar.

        Upon successful selection and validation, the image path is stored, and the
        selected image label is updated with the file name.

        Raises:
            Displays error messages in the QGIS message bar for invalid file formats,
            insufficient channels, or file reading errors.
        """
        image_path, _ = QFileDialog.getOpenFileName(
            self, "Select Satellite Image", "", "Images (*.tif *.tiff)"
        )
        if image_path:
            if not image_path.lower().endswith((".tif", ".tiff")):
                self.iface.messageBar().pushMessage(
                    "Error",
                    "Only .tif or .tiff files are supported",
                    level=Qgis.Warning,
                )
                return

            try:
                with rasterio.open(image_path) as src:
                    if src.count < 4:
                        self.iface.messageBar().pushMessage(
                            "Error",
                            "Image must have at least 4 channels (blue, green, red, NIR)",
                            level=Qgis.Warning,
                        )
                        return
            except Exception as e:
                self.iface.messageBar().pushMessage(
                    "Error", f"Failed to read image: {str(e)}", level=Qgis.Critical
                )
                return

            self.image_path = image_path
            self.selected_image_label.setText(
                f"Selected Image: {os.path.basename(image_path)}"
            )

    def select_output_dir(self):
        """
        Opens a dialog for the user to select an output directory and sets the
        selected directory path to the output_dir widget if a directory is chosen.

        This method uses QFileDialog to prompt the user with a directory selection
        dialog. If the user selects a directory, the path of the selected directory
        is displayed in the output_dir text field.
        """
        directory = QFileDialog.getExistingDirectory(self, "Select Output Directory")
        if directory:
            self.output_dir.setText(directory)

    def process_image(self):
        """
        Processes the selected image for cloud detection and handles the output.
        This method performs the following steps:
        1. Validates that an image has been selected.
        2. Ensures that the output file name and directory are specified.
        3. Constructs the output file path.
        4. Optionally adds the input image as a raster layer in QGIS.
        5. Runs the cloud detection process using the specified model type.
        6. Adds the resulting output as a raster layer in QGIS.
        7. Configures visualization settings for the output layer.
        8. Displays success or error messages in the QGIS message bar.
        Raises:
            Exception: If the result layer fails to load or if any other error occurs during processing.
        Notes:
            - The method uses the `detect_clouds` function to perform the cloud detection.
            - The QGIS interface (`self.iface`) is used for adding layers and displaying messages.
            - The method terminates early if required inputs are missing or invalid.
        """
        if not hasattr(self, "image_path"):
            self.iface.messageBar().pushMessage(
                "Error", "Please select an image first", level=Qgis.Warning
            )
            return

        output_name = self.output_name.text() + ".tif"
        output_dir = self.output_dir.text()

        if not output_name:
            self.iface.messageBar().pushMessage(
                "Error", "Please specify output file name", level=Qgis.Warning
            )
            return

        if not output_dir:
            self.iface.messageBar().pushMessage(
                "Error", "Please specify output directory", level=Qgis.Warning
            )
            return

        output_path = os.path.join(output_dir, output_name)

        model_type = self.model_type_combo.currentText()

        try:
            if self.add_input_checkbox.isChecked():
                input_layer = self.iface.addRasterLayer(
                    self.image_path, f"Input_{os.path.basename(self.image_path)}"
                )
                if not input_layer.isValid():
                    self.iface.messageBar().pushMessage(
                        "Warning",
                        "Failed to load input image as a layer",
                        level=Qgis.Warning,
                    )

            result_path = detect_clouds(
                self.image_path, output_path, model_type=model_type
            )

            layer = self.iface.addRasterLayer(result_path, f"{output_name}")
            if not layer.isValid():
                raise Exception("Failed to load result layer")

            self.setup_layer_visualization(layer)

            self.iface.messageBar().pushMessage(
                "Success", "Cloud detection completed", level=Qgis.Info
            )

            self.accept()

        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Error", f"Processing failed: {str(e)}", level=Qgis.Critical
            )

    def setup_layer_visualization(self, layer):
        """
        Configures the visualization of a raster layer using a single-band pseudo-color renderer.
        This method sets up a raster shader with a color ramp shader that interpolates between
        specified color ramp items. The color ramp is defined with a minimum value of 0.0 and
        a maximum value of 1.0, and both values are assigned the same color (yellow in this case).
        The configured shader is then applied to the raster layer, and the layer's symbology is
        refreshed to reflect the changes.
        Args:
            layer (QgsRasterLayer): The raster layer to configure visualization for.
        """

        shader = QgsRasterShader()
        color_ramp_shader = QgsColorRampShader()
        color_ramp_shader.setColorRampType(QgsColorRampShader.Interpolated)

        color_ramp_shader.setMinimumValue(0.0)
        color_ramp_shader.setMaximumValue(1.0)
        color_ramp_items = [
            QgsColorRampShader.ColorRampItem(0.0, QColor(255, 255, 0)),
            QgsColorRampShader.ColorRampItem(1.0, QColor(255, 255, 0)),
        ]
        color_ramp_shader.setColorRampItemList(color_ramp_items)
        shader.setRasterShaderFunction(color_ramp_shader)

        renderer = QgsSingleBandPseudoColorRenderer(layer.dataProvider(), 1, shader)
        layer.setRenderer(renderer)

        layer.triggerRepaint()
        iface.layerTreeView().refreshLayerSymbology(layer.id())
